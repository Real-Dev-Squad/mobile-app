# This workflow will do a clean install of node dependencies, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Continous-Integeration

on: pull_request

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [16.x]

    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - name: Install React Native CLI
        run: |
          yarn global add react-native-cli
      - name: Install node modules
        run: |
          yarn install
      - name: Linting
        run: |
          yarn lint
      - name: Prettier Check
        run: |
          yarn format-check
      - name: Running test
        run: |
          yarn test
  build-testing:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js v16
        uses: actions/setup-node@v1
        with:
          node-version: 16.x

      - name: Install dependencies
        run: |
          if [ -e yarn.lock ]; then
          yarn install --frozen-lockfile
          elif [ -e package-lock.json ]; then
          npm ci
          else
          npm i
          fi

      - name: Cache Gradle Wrapper
        uses: actions/cache@v2
        with:
          path: ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-wrapper-${{ hashFiles('gradle/wrapper/gradle-wrapper.properties') }}

      - name: Cache Gradle Dependencies
        uses: actions/cache@v2
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-caches-${{ hashFiles('gradle/wrapper/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-caches-
      - name: Make Gradlew Executable
        run: cd android && chmod +x ./gradlew

      - name: Build assets folder
        run: |
          cd android/app/src/main &&
          if [ -d "assets" ]; then
            rm -r assets
          fi

      - name: Build release
        run: |
          mkdir -p android/app/src/main/assets &&
          npx react-native bundle --platform android --dev false --entry-file index.js --bundle-output android/app/src/main/assets/index.android.bundle --assets-dest android/app/src/main/res &&
          cd android &&
          ./gradlew assembleDebug

      - name: list files
        run: ls -lrt android/app/build/outputs/apk/debug

      - name: Update Pull Request File
        run: |
          echo "APK: \`android/app/build/outputs/apk/debug/app-debug.apk\`" >> PULL_REQUEST.md
          cat pull_request.md
